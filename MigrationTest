def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities
def Packaging = globalLib.Packaging

def BRANCH_NAME

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT

pipeline
{
    agent any

    options
    {
        timestamps()
        disableConcurrentBuilds()
    }
    stages
    {
        stage("Init")
        {
            steps
            {
                script
                {
                    powershell script: "Copy-Item .\\resources\\migrationTest\\* ${env.WORKSPACE}\\"
                }
            }
        }
        stage('Create Test Environment') 
        {
            steps 
            {
                script
                { 
                    // Start docker environment
                    DOCKER_SQL_PORT = Utilities.getSqlPort(this)
                    DOCKER_PLATFORM_PORT = Utilities.getPlatformPort(this)
                    DOCKER_STOREFRONT_PORT = Utilities.getStorefrontPort(this)

                    echo "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}, DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}, DOCKER_SQL_PORT=${DOCKER_SQL_PORT}"
                    // 1. stop containers,
                    //  remove instances including database
                    // 2. start up new containers
                    withEnv(["DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                        bat "docker-compose up -d"
                    }
                }		
            }
        }
        stage('Install Modules')
        {
            steps
            {
                script
                {
                    // install modules
                    Packaging.installModules(this, 1)
                    // check installed modules
                    Packaging.checkInstalledModules(this)
                }
            }
        }
        stage('Install Sample Data')
        {
            steps
            {
                script
                {
					Packaging.createSampleData(this)
                }
            }
        }
        stage('Run Platform 3')
        {
            steps
            {
                script
                {
                    def conn_str = "Data Source=vc-db;Initial Catalog=VirtoCommerce2;Persist Security Info=True;User ID=sa;Password=v!rto_Labs!;MultipleActiveResultSets=True;Connect Timeout=30;"
                    bat "docker run -d --network=${env.BUILD_TAG.toLowerCase()}_virto -e ConnectionStrings:VirtoCommerce=\"${conn_str}\" -p 9090:80 --name migration_test_platform3 mt-platform:latest"
                    input message: "Stop"
                }
            }
        }
    }

    post
    {
        always
        {
            withEnv(["DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"])
            {                
                bat "docker rm migration_test_platform3 -f"
                bat "docker-compose down -v"
            }
        }
    }
}