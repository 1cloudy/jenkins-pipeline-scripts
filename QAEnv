def Utilities = library('virto-shared-library').jobs.scripts.Utilities
def Packaging = library('virto-shared-library').jobs.scripts.Packaging
import groovy.json.JsonSlurperClassic

def BRANCH_NAME
def BASE_BRANCH

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_PREFIX
def DOCKER_TAG

pipeline
{
    agent any

    options
    {
        timestamps()
    }

    stages
    {
        stage("User Input")
        {
            steps
            {
                script
                {
                    checkout scm
                    def branches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\vc").join("\n")
                    def userInput = input message: "Select Branch", parameters: 
                    [
                        choice(name:'Base', choices:"dev\nmaster"),
                        choice(name:'Branch', choices:branches)
                    ]
                    BASE_BRANCH = userInput["Base"]
                    BRANCH_NAME = userInput["Branch"]
                }
            }
        }
        stage("Preparing Solution"){
            steps
            {
                script
                {
                    def csSrc = "${env.SOLUTION_FOLDER}\\vc\\${BRANCH_NAME}"
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    powershell "Remove-Item -Path ${env.WORKSPACE}\\CS\\* -Recurse -Force -ErrorAction Continue"
                    powershell "Copy-Item -Path ${csSrc}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    powershell "Rename-Item -Path ${modulesRoot} -NewName modules"
                }
            }
        }
        stage("Docker Environment")
        {
            steps
            {
                script
                {
                    stage('Create Test Environment') {
                        timestamps { 
                            // Start docker environment	
		                    def composeFolder = "${env.WORKSPACE}@libs\\virto-shared-library\\resources\\docker.core\\windowsnano"
                            dir(composeFolder)
                            {
                                DOCKER_SQL_PORT = Utilities.getSqlPort(this)
                                DOCKER_PLATFORM_PORT = Utilities.getPlatformPort(this)
                                DOCKER_STOREFRONT_PORT = Utilities.getStorefrontPort(this)
                                DOCKER_PREFIX = 'qaenv'
                                switch(BASE_BRANCH)
                                {
                                    case 'dev':
                                    DOCKER_TAG = 'dev-branch'
                                    break
                                    case 'master':
                                    DOCKER_TAG = 'latest'
                                    break
                                }

                                echo "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}, DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}, DOCKER_SQL_PORT=${DOCKER_SQL_PORT}"
                                // 1. stop containers
                                // 2. remove instances including database
                                // 3. start up new containers
                                withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PREFIX=${DOCKER_PREFIX}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                                    bat "docker-compose stop"
                                    bat "docker-compose rm -f -v"
                                    bat "docker-compose up -d"
                                }
                            }			
                        }
                    }
                    stage('Install Modules'){
                        timestamps{
                            def platformContainer = Utilities.getPlatformContainer(this)

                            // install modules
                            Utilities.runSharedPS(this, 'qaenv/install-modules.ps1', "-ApiUrl \"${Utilities.getPlatformHost(this)}\" -PlatformContainer ${platformContainer} -ModulesDir ${env.WORKSPACE}\\CS\\modules")
                        }
                    }
                    stage('Install Sample Data'){
                        timestamps{
                            Utilities.runSharedPS(this, "vc-setup-sampledata.ps1", "-apiurl \"http://localhost:${DOCKER_PLATFORM_PORT}\"")
                        }
                    }
                    stage('Theme Install'){
                        timestamps 
                        {
                            //def storefrontContainer = Utilities.getStorefrontContainer(this)
                            def platformContainer = Utilities.getPlatformContainer(this)
                            def themeFolder = "${env.WORKSPACE}\\CS\\theme"
                            //Utilities.runSharedPS(this, "vc-install-theme.ps1", "-themeZip \"${themeFolder}\" -platformContainer ${platformContainer}")
                            bat "docker exec ${platformContainer} powershell -Command \"Remove-Item C:\\vc-platform\\App_Data\\cms-content\\Themes -Force -Recurse\""
                            bat "docker cp ${themeFolder} ${platformContainer}:/tmp/Themes"
                            bat "docker exec ${platformContainer} powershell -Command \"Move-Item -Path \\tmp\\Themes -Destination \\vc-platform\\App_Data\\cms-content\""
                        }
                    }
                    
                    stage('Finish'){
                        input('Finish')
                    }
                }
            }
        }
    }

    post
    {
        always
        {
            script
            {
                def composeFolder = "${env.WORKSPACE}@libs\\virto-shared-library\\resources\\docker.core\\windowsnano"
                dir(composeFolder)
                {
                    withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PREFIX=${DOCKER_PREFIX}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]){
                        bat "docker-compose down -v"
                    }
                    bat "docker image prune -f"
                }
            }
        }
    }
}